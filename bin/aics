#!/usr/bin/env node

// 'use strict';

var commander = require('commander');
var fs        = require('fs');
var async     = require('async');
var path      = require('path');
var controller   = require('../lib/controller');
var ProjectManager = require('../lib/aics/project');
var PackageManager = require('../lib/aics/package');
var Account = require('../lib/aics/account');

if (!process.env.AICS_HOST) {
  process.env.AICS_HOST = 'http://storage.fami2u.com';
}

var pkg       = require('../package.json');

commander.version(pkg.version)
  .description(pkg.description)
  .option('-v, --version', 'meteorup version')
  .usage('deplay project-name');

commander.on('--help', function() {
  console.log('  Basic Examples:');
  console.log('');
  console.log('  Faster install meteor:');
  console.log('');
  console.log('    $ meteorup install');
  console.log('');
  console.log('  Deployment project:');
  console.log('');
  console.log('    $ meteorup deploy appName');
  console.log('');
  console.log('  Command help:');
  console.log('');
  console.log('    $ meteorup deploy -h');
  console.log('');
});

// 部署到meteorup
commander.command('deploy <project-name> <private-key>')
  .option('-m, --mobile-settings <mobile-settings.json>', 'Set mobile-settings from json file')
  .option('-s, --server-only', 'server only')
  .option('-e, --env <env.json>', 'Set environment variables from json file')
  .option('-d, --debug', 'debug mode')
  .description('Deployment this project to meteorup.cn microhost')
  .action(function(argument , privateKey ,options) {

    var pwd = path.resolve('.');

    // console.log("argument"); //project-name
    // console.log(argument); // project-name
    // console.log("pwd"); //项目地址
    // console.log(pwd); //项目地址
    // console.log("commander");// 整个Comm
    // console.log(commander); //整个Comm
    // console.log("options"); //选项
    // console.log(privateKey); //选项
    // console.log(options); //选项
    
    // for( var opt in options){
    //   console.log("============");
    //   console.log(opt);
    //   console.log("=");
    //   console.log(options[opt]);
    // }

    var actionsRegistry = new controller( pwd ,options);
    if(actionsRegistry['deploy']) {
      actionsRegistry['deploy'](argument , privateKey);
    }

  }).on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log('    $ meteorup deploy appName  # Deployment to http://appName.meteorup.cn ');
    console.log();
    console.log('    $ meteorup deploy appName --env env.json');
    console.log();
  }
);

// 配置服务器运行环境
commander.command('setup')
  .description('Configuration runtime environments on private server')
  .action(function(options) {

    var pwd = path.resolve('.');

    var actionsRegistry = new controller( pwd ,options);
    if(actionsRegistry['setup']) {
      actionsRegistry['setup']();
    }
   
  }).on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log('    $ meteorup setup #  configuration your server');
    console.log();
  }
);


// 部署到私有的服务器上
commander.command('push')
  .option('-m, --mobile-settings <mobile-settings.json>', 'Set mobile-settings from json file')
  .option('-s, --server-only', 'server only')
  .option('-d, --debug', 'debug mode')
  .option('-b, --verbose', 'verbose mode')
  .description('Deployment a project to private server')
  .action(function(options) {

    var pwd = path.resolve('.');
    // console.log(options);

    var actionsRegistry = new controller( pwd ,options);
    if(actionsRegistry['push']) {
      actionsRegistry['push']();
    }

  }).on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log('    $ meteorup push  # config package.js ');
    console.log();
    console.log('    $ meteorup push');
    console.log();
  }
);

// logs
commander.command('logs')
  .option('-l, --lines <lines>', 'output the last N lines, instead of the last 50 by default')
  .description('Print logs on server')
  .action(function(options) {

    var pwd = path.resolve('.');
    // console.log(options);

    var actionsRegistry = new controller( pwd ,options);
    if(actionsRegistry['logs']) {
      actionsRegistry['logs']();
    }

  }).on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log('    $ meteorup logs  ');
    console.log();
    console.log('    $ meteorup logs -t 100');
    console.log();
  }
);
// logs
commander.command('mongo')
  .description('Connection to a remote mongo database')
  .action(function(options) {

    var pwd = path.resolve('.');
    // console.log(options);

    var actionsRegistry = new controller( pwd ,options);
    if(actionsRegistry['mongo']) {
      actionsRegistry['mongo']();
    }

  }).on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log('    $ meteorup mongo');
    console.log();
  }
);
//add user
commander
  .command('adduser')
  .description('登录aics cli')
  .action(function(env, options) {
    Account.adduser();
  }).on('--help', function() {
    console.log('  说明:');
    console.log();
    console.log('    在*.fami2u.com注册过的账号可直接登录');
    console.log();
  });

//log logind user info
commander
  .command('whoami')
  .description('显示 aics 登录用户信息')
  .action(function(env, options) {
    var user = Account.get();
    console.log(user.username);
  })

// generate aics codedepot conf or aics project conf

commander
  .command('init')
  .description('生成aics配置文件')
  .option('-p, --project <name>', 'change the working directory')
  .option('-e, --example <name>', 'change the working directory')
  .action(function(options) {
    if (options.project) {
      ProjectManager.initProject(process.argv);
      return;
    }
    if (options.example) {
      ProjectManager.initWithSample(options.example);
      return;
    }
    PackageManager.init(process.argv);
  }).on('--help', function() {
    console.log('  说明:');
    console.log();
    console.log('    生成aics配置文件');
    console.log();
  });

commander
  .command('add [packagename]')
  .description('添加 aics 代码包 代码包地址: http://code.fami2u.com/')
  .action(function(env, options) {
    Account.adduser();
  }).on('--help', function() {
    console.log('  Case:');
    console.log();
    console.log('    aics add fami:readme');
    console.log();
  });

commander
  .command('update')
  .option('-all, --chdir <path>', 'change the working directory')
  .description('登录aics系统')
  .action(function(env, options) {
    Account.adduser();
  }).on('--help', function() {
    console.log('  说明:');
    console.log();
    console.log('    在*.fami2u.com注册过的账号可直接登录');
    console.log();
  });

commander
  .command('publish')
  .option('-p, --project <PROJECTNAME>', '发布解决方案（项目）')
  .description('发布aics项目或组件')
  .action(function(options) {
    if (options.project) {
      ProjectManager.publish();
      return;
    }
    PackageManager.publish();
  }).on('--help', function() {
    console.log('  说明:');
    console.log();
    console.log('    在*.fami2u.com注册过的账号可直接登录');
    console.log();
  });

// commander
//   .command('remove [packagename]')
//   .description('删除项目中已经添加的代码包')
//   .action(function(env, options) {
//     Account.adduser();
//   }).on('--help', function() {
//     console.log('  说明:');
//     console.log();
//     console.log('    在 *.fami2u.com 注册过的账号可直接登录');
//     console.log();
//   });

commander
  .command('addfile')
  .option('-f, --file <path>', '添加文件到组件')
  .option('-t, --target <name>', '添加到的组件名称')
  .description('添加文件到组件')
  .action(function(options) {
    PackageManager.addfile(options.target, options.file);
  }).on('--help', function() {
    console.log('  说明:');
    console.log();
    console.log('    在*.fami2u.com注册过的账号可直接登录');
    console.log();
  });

commander
  .command('lsfile')
  .option('-t, --target <name>', '组件名称')
  .description('显示代码包中的文件')
  .action(function(options) {
    PackageManager.files(options.target);
  }).on('--help', function() {
    console.log('  说明:');
    console.log();
    console.log('    在*.fami2u.com注册过的账号可直接登录');
    console.log();
  });



// 安装meteor
// commander.command('install')
//   .option('--verbose', 'verbose mode')
//   .description('Faster install meteor from meteorup mirror server')
//   .action(function(cmd , options) {

//     var pwd = path.resolve('.');
//     console.log("come soon.");
 
//   }).on('--help', function() {
//     console.log('  Examples:');
//     console.log();
//     console.log('    $ meteorup install  # Install meteor ');
//     console.log();
//   }
// );

// // 添加包
// commander.command('add <package>')
//   .description('Add a package to this project.')
//   .action(function(cmd , options) {

//     var pwd = path.resolve('.');
//     // console.log(options);
//     console.log("come soon.");
 
//   }).on('--help', function() {
//     console.log('  Examples:');
//     console.log();
//     console.log('    $ meteorup add romejiang:wechat-pay');
//     console.log();
//   }
// );

// // 添加包
// commander.command('remove <package>')
//   .description('Remove a package from this project.')
//   .action(function(cmd , options) {

//     var pwd = path.resolve('.');
//     // console.log(options);
//     console.log("come soon.");
 
//   }).on('--help', function() {
//     console.log('  Examples:');
//     console.log();
//     console.log('    $ meteorup remove romejiang:wechat-pay');
//     console.log();
//   }
// );



commander.parse(process.argv);
